source('../functions/Read_Functions.R') # in ./functions
# Set output directory that will contain all cell_typing pdf plots and output gene files
path_output = "../../../plot_outputs/"
# Load data as R objects for RA1
load('../data/RA1_norm.exp.values.1') # in ./data
load('../data/RA1_norm.exp.values.2') # in ./data
load('../data/RA1_norm.exp.values.3') # in ./data
load('../data/RA1_norm.exp.values.4') # in ./data
load('../data/RA1_1_selected_adjusted_spots_3D_manual_app') # in ./data
load('../data/RA1_2_selected_adjusted_spots_3D_manual_app') # in ./data
load('../data/RA1_3_selected_adjusted_spots_3D_manual_app') # in ./data
load('../data/RA1_4_selected_adjusted_spots_3D_manual_app') # in ./data
# Combine in one file
RA.norm = cbind(m1, m2, m3, m4) # RA1
RA.norm = genes_cleanup(RA.norm)
m = RA.norm # this is a combined matrix for all sections from RA1 patient with 4 norm expression values (individual files avaiable in ./data)
# Load all infilatrates for RA1
inf_s1 = read.csv("../data/RA1_1_all_inf.csv", header = T, row.names = 1) # files found on SCP
inf_s2 = read.csv("../data/RA1_2_all_inf.csv", header = T, row.names = 1) # files found on SCP
inf_s3 = read.csv("../data/RA1_3_all_inf.csv", header = T, row.names = 1) # files found on SCP
inf_s4 = read.csv("../data/RA1_4_all_inf.csv", header = T, row.names = 1) # files found on SCP
### Take only infiltrates that are present in all sections according to annotations
# eg. inf1_all have values tracking "inf1" accross all 4 sections
# naming in "all_inf.csv" files was arbitrary so new objects are made here
inf1_all = c(row.names(subset(inf_s1, infiltrate == "Inf3")), row.names(subset(inf_s2, infiltrate == "Inf1")),
row.names(subset(inf_s3, infiltrate == "Inf14")), row.names(subset(inf_s4, infiltrate == "Inf4")))
inf2_all = c(row.names(subset(inf_s1, infiltrate == "Inf4")), row.names(subset(inf_s2, infiltrate == "Inf3")),
row.names(subset(inf_s3, infiltrate == "Inf15")), row.names(subset(inf_s4, infiltrate == "Inf5")))
inf3_all = c(row.names(subset(inf_s1, infiltrate == "Inf11")), row.names(subset(inf_s2, infiltrate == "Inf7")),
row.names(subset(inf_s3, infiltrate == "Inf8")), row.names(subset(inf_s4, infiltrate == "Inf11")))
inf4_all = c(row.names(subset(inf_s1, infiltrate == "Inf16" | infiltrate == "Inf17")), row.names(subset(inf_s2, infiltrate == "Inf11")),
row.names(subset(inf_s3, infiltrate == "Inf4")), row.names(subset(inf_s4, infiltrate == "Inf6")))
inf5_all = c(row.names(subset(inf_s1, infiltrate == "Inf19")), row.names(subset(inf_s2, infiltrate == "Inf13")),
row.names(subset(inf_s3, infiltrate == "Inf1")), row.names(subset(inf_s4, infiltrate == "Inf1")))
# Subset per infiltrate as the naming ie. Inf1 presumes we are following the same infiltrate (given 3D alignment) in all present sections
RA.norm.inf1 = RA.norm[,colnames(RA.norm) %in% inf1_all]
RA.norm.inf2 = RA.norm[,colnames(RA.norm) %in% inf2_all]
RA.norm.inf3 = RA.norm[,colnames(RA.norm) %in% inf3_all]
RA.norm.inf4 = RA.norm[,colnames(RA.norm) %in% inf4_all]
RA.norm.inf5 = RA.norm[,colnames(RA.norm) %in% inf5_all]
# Make an object with all annotated infiltrates
all_inf = c(row.names(inf_s1),row.names(inf_s2), row.names(inf_s3), row.names(inf_s4))
### Make avg gene exp barplot per inf and section
gen_names = c("CD52","MS4A1","FN1") # list of marker genes
# Calculate avg gene expression per inf and section
inf1_rm = rm_section(RA.norm.inf1[gen_names,]) + 1
inf2_rm = rm_section(RA.norm.inf2[gen_names,]) + 1
inf3_rm = rm_section(RA.norm.inf3[gen_names,]) + 1
inf4_rm = rm_section(RA.norm.inf4[gen_names,]) + 1
inf5_rm = rm_section(RA.norm.inf5[gen_names,]) + 1
# Calculate sd of gene expression per inf and sections
sd1_rm = sd_section(RA.norm.inf1[gen_names,])
sd2_rm = sd_section(RA.norm.inf2[gen_names,])
sd3_rm = sd_section(RA.norm.inf3[gen_names,])
sd4_rm = sd_section(RA.norm.inf4[gen_names,])
sd5_rm = sd_section(RA.norm.inf5[gen_names,])
# Calculate size of gene expression per inf and sections
s1_rm = size_section(RA.norm.inf1[gen_names,])
s2_rm = size_section(RA.norm.inf2[gen_names,])
s3_rm = size_section(RA.norm.inf3[gen_names,])
s4_rm = size_section(RA.norm.inf4[gen_names,])
s5_rm = size_section(RA.norm.inf5[gen_names,])
# Plot for each Inf separately if needed
myData = data.frame(as.numeric(inf1_rm), as.numeric(sd1_rm/sqrt(s1_rm)))
colnames(myData) = c("Avg", "SEM")
row.names(myData) = c(paste("Section1", gen_names, sep ="_"),paste("Section2", gen_names, sep ="_"),
paste("Section3", gen_names, sep ="_"),paste("Section4", gen_names,  sep ="_"))
limits <- aes(ymax = myData$Avg + myData$SEM, ymin = myData$Avg - myData$SEM)
p <- ggplot(data = myData, aes(x = factor(sapply(strsplit(row.names(myData), split = "_"),"[[",1)), y = Avg, fill = rep(c("1_CD52","2_MS4A1","3_FN1"), 4)))
p + geom_bar(stat = "identity", position = position_dodge(0.9)) +
geom_errorbar(limits, position = position_dodge(0.9), width = 0.25) +
labs(x = "", y = "Avg expression") +
scale_fill_manual(name = "Gene", values=c("#066799",  "#7392CB","#CDCC63"))
### Combine all the inf norm data in one matrix
inf_all = mbind(RA.norm.inf1, RA.norm.inf2, RA.norm.inf3, RA.norm.inf4, RA.norm.inf5)
# Run DPT on the whole inf matrix
dm = run_dpt(inf_all)
# Do hierarchical clustering
hc = hclust(dist(as.matrix(dm$RA1, dm$RA2, dm$RA3)),method = "ward.D")
plot(hc)
clusters = cutree(hc, k = 2) # 2 clusters
names(clusters) = rownames(dm)
col.clusters = c(rep("#F16049",length(clusters[clusters == 1])), rep("#50BCEC",length(clusters[clusters == 2])),rep("#8a3795",length(clusters[clusters == 3])))
scatter3D(dm$RA1, dm$RA2, dm$RA3, pch=16, col = col.clusters)
### Do DEG analysis based on Nature Biotechnology 33, 495â€“502 (2015) doi:10.1038/nbt.3192
inf_all = genes_cleanup(inf_all)
m3_ref = inf_all # Precaution
# Split into cluster groups
mg1 <- m3_ref[,clusters == 1]
mg2 <- m3_ref[,clusters == 2]
mg3 <- m3_ref[,clusters == 3]
# Do bimodial test where degg[,1] is the p-value and degg[,2] is the relative difference between the groups
degg <- bimod.diffExp.test(mg1, m3_ref[,!colnames(m3_ref) %in% colnames(mg1)], row.names(mg1))
clus1.genes <- rownames(subset(degg, degg[,1] < 0.001 & (degg[,2] > 0.5 | degg[,2] < -0.5)))
clus1.genes.values = degg[clus1.genes,]
degg <- bimod.diffExp.test(mg2,m3_ref[,!colnames(m3_ref) %in% colnames(mg2)], row.names(mg2))
clus2.genes <- rownames(subset(degg, degg[,1] < 0.001 & (degg[,2] > 0.5 | degg[,2] < -0.5)))
clus2.genes.values = degg[clus2.genes,]
degg <- bimod.diffExp.test(mg3,m3_ref[,!colnames(m3_ref) %in% colnames(mg3)], row.names(mg3))
clus3.genes <- rownames(subset(degg, degg[,1] < 0.001 & (degg[,2] > 0.5 | degg[,2] < -0.5)))
clus3.genes.values = degg[clus3.genes,]
# Clean up gene names (remove house keepers)
genes = unique(c(clus1.genes,clus2.genes,clus3.genes))
house.keeping.genes = row.names(read.delim("../data/house_keeping_final.txt", row.names = 1)) # found in ./data
genes <- intersect(genes, outersect(genes,row.names(house.keeping.genes)))
genes
### Make distance heatmaps of clones parallel to tSNE
ra.1 = sapply(strsplit(rownames(dm),"_"),"[[",1)
colfunc <- colorRampPalette(c("blue","yellow" ,"red"))
color.ra.1 = c(rep(colfunc(4)[1], length(ra.1[ra.1 == "X1"])), rep(colfunc(4)[2], length(ra.1[ra.1 == "X2"])),rep(colfunc(4)[3], length(ra.1[ra.1 == "X3"])),rep(colfunc(4)[4], length(ra.1[ra.1 == "X4"])))
names(color.ra.1) = rownames(data)
annotation_col = as.matrix(c(rep("#f15f48", ncol(mg1)), rep("#4ebceb", ncol(mg2)), rep("#8a3795", ncol(mg3))))
rownames(annotation_col) = colnames(m3_ref)
annotation_col = c(annotation_col[annotation_col == "#f15f48",],annotation_col[annotation_col == "#4ebceb",],annotation_col[annotation_col == "#8a3795",])
double.col = cbind(annotation_col, color.ra.1)
cbind(names(annotation_col) == names(color.ra.1))
ann=matrix(nrow=length(annotation_col), ncol = 2)
rownames(ann) = names(annotation_col)
for (name in names(annotation_col)){
ann[name,] = cbind(annotation_col[name], color.ra.1[name])
}
#Assign color annotations for plotting in 3D for inf
ann.col.inf = matrix(nrow=ncol(RA.norm), ncol = 1)
rownames(ann.col.inf) = colnames(RA.norm)
for (sam in colnames(RA.norm)){
if ((!sam %in% row.names(ann)) == TRUE) ann.col.inf[sam,1] = 4
else {
if (ann[sam,1] == "#f15f48") { ann.col.inf[sam,1] = 3}
if (ann[sam,1] == "#4ebceb") { ann.col.inf[sam,1] = 2}
if (ann[sam,1] == "#8a3795") { ann.col.inf[sam,1] = 1}
}
}
# pdf("Heatmap_Inf.pdf")
source_url("https://raw.githubusercontent.com/obigriffith/biostar-tutorials/master/Heatmaps/heatmap.3.R")
quantile.range <- quantile(m3_ref, probs = seq(0, 1, 0.01))
palette.breaks <- seq(quantile.range["0%"], quantile.range["100%"], 0.1)
# use http://colorbrewer2.org/ to find optimal divergent color palette (or set own)
col.pal = colorRampPalette(c("black","purple","gold1"))
color.palette  <- col.pal(length(palette.breaks) - 1)
heatmap.3(m3_ref[genes, ], Rowv = T, Colv = F, col=color.palette, breaks = palette.breaks,
scale="none",trace = "none",density.info = "none", ColSideColors=ann)
#dev.off()
ann.col = matrix(nrow=nrow(ann), ncol = 1)
rownames(ann.col) = rownames(ann)
for (sam in rownames(ann)){
if ((ann[sam,1] == "#FED8B1") & (ann[sam,2] == "#FF7F00")){ ann.col[sam,1] = "red"}
else {ann.col[sam,1] = ann[sam,1] }
}
# removes all glob variables from env
rm(list = ls())
# Installing DPT if needed
library(devtools)
# Loading libraries
library(dpt)
library(gplots)
library(destiny)
library(scran)
library(plot3D)
library(Rtsne)
library(jackstraw)
library(gdata)
library(ggplot2)
library(akima)
library(matrixStats)
setwd("/Users/sanjavickovic/Desktop/morphoSPOT/3dst_repo/3dst/de_analysis")
# Source f(x) file
source('../functions/Read_Functions.R') # in ./functions
# Source f(x) file
source('../functions/Read_Functions.R') # in ./functions
# Set output directory that will contain all cell_typing pdf plots and output gene files
path_output = "../../../plot_outputs/"
# Load data as R objects for RA1
load('../data/RA1_norm.exp.values.1') # in ./data
load('../data/RA1_norm.exp.values.2') # in ./data
load('../data/RA1_norm.exp.values.3') # in ./data
load('../data/RA1_norm.exp.values.4') # in ./data
load('../data/RA1_1_selected_adjusted_spots_3D_manual_app') # in ./data
load('../data/RA1_2_selected_adjusted_spots_3D_manual_app') # in ./data
load('../data/RA1_3_selected_adjusted_spots_3D_manual_app') # in ./data
load('../data/RA1_4_selected_adjusted_spots_3D_manual_app') # in ./data
# Combine in one file
RA.norm = cbind(m1, m2, m3, m4) # RA1
RA.norm = genes_cleanup(RA.norm)
m = RA.norm # this is a combined matrix for all sections from RA1 patient with 4 norm expression values (individual files avaiable in ./data)
# Load all infilatrates for RA1
inf_s1 = read.csv("../data/RA1_1_all_inf.csv", header = T, row.names = 1) # files found on SCP
inf_s2 = read.csv("../data/RA1_2_all_inf.csv", header = T, row.names = 1) # files found on SCP
inf_s3 = read.csv("../data/RA1_3_all_inf.csv", header = T, row.names = 1) # files found on SCP
inf_s4 = read.csv("../data/RA1_4_all_inf.csv", header = T, row.names = 1) # files found on SCP
### Take only infiltrates that are present in all sections according to annotations
# eg. inf1_all have values tracking "inf1" accross all 4 sections
# naming in "all_inf.csv" files was arbitrary so new objects are made here
inf1_all = c(row.names(subset(inf_s1, infiltrate == "Inf3")), row.names(subset(inf_s2, infiltrate == "Inf1")),
row.names(subset(inf_s3, infiltrate == "Inf14")), row.names(subset(inf_s4, infiltrate == "Inf4")))
inf2_all = c(row.names(subset(inf_s1, infiltrate == "Inf4")), row.names(subset(inf_s2, infiltrate == "Inf3")),
row.names(subset(inf_s3, infiltrate == "Inf15")), row.names(subset(inf_s4, infiltrate == "Inf5")))
inf3_all = c(row.names(subset(inf_s1, infiltrate == "Inf11")), row.names(subset(inf_s2, infiltrate == "Inf7")),
row.names(subset(inf_s3, infiltrate == "Inf8")), row.names(subset(inf_s4, infiltrate == "Inf11")))
inf4_all = c(row.names(subset(inf_s1, infiltrate == "Inf16" | infiltrate == "Inf17")), row.names(subset(inf_s2, infiltrate == "Inf11")),
row.names(subset(inf_s3, infiltrate == "Inf4")), row.names(subset(inf_s4, infiltrate == "Inf6")))
inf5_all = c(row.names(subset(inf_s1, infiltrate == "Inf19")), row.names(subset(inf_s2, infiltrate == "Inf13")),
row.names(subset(inf_s3, infiltrate == "Inf1")), row.names(subset(inf_s4, infiltrate == "Inf1")))
# Subset per infiltrate as the naming ie. Inf1 presumes we are following the same infiltrate (given 3D alignment) in all present sections
RA.norm.inf1 = RA.norm[,colnames(RA.norm) %in% inf1_all]
RA.norm.inf2 = RA.norm[,colnames(RA.norm) %in% inf2_all]
RA.norm.inf3 = RA.norm[,colnames(RA.norm) %in% inf3_all]
RA.norm.inf4 = RA.norm[,colnames(RA.norm) %in% inf4_all]
RA.norm.inf5 = RA.norm[,colnames(RA.norm) %in% inf5_all]
# Make an object with all annotated infiltrates
all_inf = c(row.names(inf_s1),row.names(inf_s2), row.names(inf_s3), row.names(inf_s4))
### Make avg gene exp barplot per inf and section
gen_names = c("CD52","MS4A1","FN1") # list of marker genes
# Calculate avg gene expression per inf and section
inf1_rm = rm_section(RA.norm.inf1[gen_names,]) + 1
inf2_rm = rm_section(RA.norm.inf2[gen_names,]) + 1
inf3_rm = rm_section(RA.norm.inf3[gen_names,]) + 1
inf4_rm = rm_section(RA.norm.inf4[gen_names,]) + 1
inf5_rm = rm_section(RA.norm.inf5[gen_names,]) + 1
# Calculate sd of gene expression per inf and sections
sd1_rm = sd_section(RA.norm.inf1[gen_names,])
sd2_rm = sd_section(RA.norm.inf2[gen_names,])
sd3_rm = sd_section(RA.norm.inf3[gen_names,])
sd4_rm = sd_section(RA.norm.inf4[gen_names,])
sd5_rm = sd_section(RA.norm.inf5[gen_names,])
# Calculate size of gene expression per inf and sections
s1_rm = size_section(RA.norm.inf1[gen_names,])
s2_rm = size_section(RA.norm.inf2[gen_names,])
s3_rm = size_section(RA.norm.inf3[gen_names,])
s4_rm = size_section(RA.norm.inf4[gen_names,])
s5_rm = size_section(RA.norm.inf5[gen_names,])
# Plot for each Inf separately if needed
myData = data.frame(as.numeric(inf1_rm), as.numeric(sd1_rm/sqrt(s1_rm)))
colnames(myData) = c("Avg", "SEM")
row.names(myData) = c(paste("Section1", gen_names, sep ="_"),paste("Section2", gen_names, sep ="_"),
paste("Section3", gen_names, sep ="_"),paste("Section4", gen_names,  sep ="_"))
limits <- aes(ymax = myData$Avg + myData$SEM, ymin = myData$Avg - myData$SEM)
p <- ggplot(data = myData, aes(x = factor(sapply(strsplit(row.names(myData), split = "_"),"[[",1)), y = Avg, fill = rep(c("1_CD52","2_MS4A1","3_FN1"), 4)))
p + geom_bar(stat = "identity", position = position_dodge(0.9)) +
geom_errorbar(limits, position = position_dodge(0.9), width = 0.25) +
labs(x = "", y = "Avg expression") +
scale_fill_manual(name = "Gene", values=c("#066799",  "#7392CB","#CDCC63"))
### Combine all the inf norm data in one matrix
inf_all = mbind(RA.norm.inf1, RA.norm.inf2, RA.norm.inf3, RA.norm.inf4, RA.norm.inf5)
# Run DPT on the whole inf matrix
dm = run_dpt(inf_all)
# Do hierarchical clustering
hc = hclust(dist(as.matrix(dm$RA1, dm$RA2, dm$RA3)),method = "ward.D")
plot(hc)
clusters = cutree(hc, k = 2) # 2 clusters
names(clusters) = rownames(dm)
col.clusters = c(rep("#F16049",length(clusters[clusters == 1])), rep("#50BCEC",length(clusters[clusters == 2])),rep("#8a3795",length(clusters[clusters == 3])))
scatter3D(dm$RA1, dm$RA2, dm$RA3, pch=16, col = col.clusters)
plot(hc)
scatter3D(dm$RA1, dm$RA2, dm$RA3, pch=16, col = col.clusters)
### Do DEG analysis based on Nature Biotechnology 33, 495â€“502 (2015) doi:10.1038/nbt.3192
inf_all = genes_cleanup(inf_all)
m3_ref = inf_all # Precaution
# Split into cluster groups
mg1 <- m3_ref[,clusters == 1]
mg2 <- m3_ref[,clusters == 2]
mg3 <- m3_ref[,clusters == 3]
# Do bimodial test where degg[,1] is the p-value and degg[,2] is the relative difference between the groups
degg <- bimod.diffExp.test(mg1, m3_ref[,!colnames(m3_ref) %in% colnames(mg1)], row.names(mg1))
clus1.genes <- rownames(subset(degg, degg[,1] < 0.001 & (degg[,2] > 0.5 | degg[,2] < -0.5)))
clus1.genes.values = degg[clus1.genes,]
degg <- bimod.diffExp.test(mg2,m3_ref[,!colnames(m3_ref) %in% colnames(mg2)], row.names(mg2))
clus2.genes <- rownames(subset(degg, degg[,1] < 0.001 & (degg[,2] > 0.5 | degg[,2] < -0.5)))
clus2.genes.values = degg[clus2.genes,]
degg <- bimod.diffExp.test(mg3,m3_ref[,!colnames(m3_ref) %in% colnames(mg3)], row.names(mg3))
clus3.genes <- rownames(subset(degg, degg[,1] < 0.001 & (degg[,2] > 0.5 | degg[,2] < -0.5)))
clus3.genes.values = degg[clus3.genes,]
# Clean up gene names (remove house keepers)
genes = unique(c(clus1.genes,clus2.genes,clus3.genes))
house.keeping.genes = row.names(read.delim("../data/house_keeping_final.txt", row.names = 1)) # found in ./data
genes <- intersect(genes, outersect(genes,row.names(house.keeping.genes)))
genes
### Make distance heatmaps of clones parallel to tSNE
ra.1 = sapply(strsplit(rownames(dm),"_"),"[[",1)
colfunc <- colorRampPalette(c("blue","yellow" ,"red"))
color.ra.1 = c(rep(colfunc(4)[1], length(ra.1[ra.1 == "X1"])), rep(colfunc(4)[2], length(ra.1[ra.1 == "X2"])),rep(colfunc(4)[3], length(ra.1[ra.1 == "X3"])),rep(colfunc(4)[4], length(ra.1[ra.1 == "X4"])))
names(color.ra.1) = rownames(data)
annotation_col = as.matrix(c(rep("#f15f48", ncol(mg1)), rep("#4ebceb", ncol(mg2)), rep("#8a3795", ncol(mg3))))
rownames(annotation_col) = colnames(m3_ref)
annotation_col = c(annotation_col[annotation_col == "#f15f48",],annotation_col[annotation_col == "#4ebceb",],annotation_col[annotation_col == "#8a3795",])
double.col = cbind(annotation_col, color.ra.1)
cbind(names(annotation_col) == names(color.ra.1))
ann=matrix(nrow=length(annotation_col), ncol = 2)
rownames(ann) = names(annotation_col)
for (name in names(annotation_col)){
ann[name,] = cbind(annotation_col[name], color.ra.1[name])
}
#Assign color annotations for plotting in 3D for inf
ann.col.inf = matrix(nrow=ncol(RA.norm), ncol = 1)
rownames(ann.col.inf) = colnames(RA.norm)
for (sam in colnames(RA.norm)){
if ((!sam %in% row.names(ann)) == TRUE) ann.col.inf[sam,1] = 4
else {
if (ann[sam,1] == "#f15f48") { ann.col.inf[sam,1] = 3}
if (ann[sam,1] == "#4ebceb") { ann.col.inf[sam,1] = 2}
if (ann[sam,1] == "#8a3795") { ann.col.inf[sam,1] = 1}
}
}
source_url("https://raw.githubusercontent.com/obigriffith/biostar-tutorials/master/Heatmaps/heatmap.3.R")
quantile.range <- quantile(m3_ref, probs = seq(0, 1, 0.01))
palette.breaks <- seq(quantile.range["0%"], quantile.range["100%"], 0.1)
# use http://colorbrewer2.org/ to find optimal divergent color palette (or set own)
col.pal = colorRampPalette(c("black","purple","gold1"))
color.palette  <- col.pal(length(palette.breaks) - 1)
heatmap.3(m3_ref[genes, ], Rowv = T, Colv = F, col=color.palette, breaks = palette.breaks,
scale="none",trace = "none",density.info = "none", ColSideColors=ann)
ann.col = matrix(nrow=nrow(ann), ncol = 1)
rownames(ann.col) = rownames(ann)
for (sam in rownames(ann)){
if ((ann[sam,1] == "#FED8B1") & (ann[sam,2] == "#FF7F00")){ ann.col[sam,1] = "red"}
else {ann.col[sam,1] = ann[sam,1] }
}
# Make tSNE clustering on all spots from the RA1 biopsy
# Make tSNE clustering on all spots from the RA1 biopsy
all.exp.values.norm = RA.norm
# this takes out per section variance
# make a sce object
section.labels = c(paste0("X1_", str_replace(colnames(m1), "X", "")),paste0("X2_", str_replace(colnames(m2), "X", "")), paste0("X3_", str_replace(colnames(m3), "X", "")), paste0("X4_", str_replace(colnames(m4), "X", "")))
section.data = c(rep("X1", ncol(m1)),rep("X2", ncol(m2)), rep("X3", ncol(m3)), rep("X4", ncol(m4)))
sce <- SingleCellExperiment(list(logcounts=as.matrix(all.exp.values.norm)), # this is based on norm counts so object names is logcounts
colData=DataFrame(section=section.data),
rowData=DataFrame(label=row.names(all.exp.values.norm)))
# get variable genes
dec3 <- modelGeneVar(sce, block=sce$section)
per.block <- dec3$per.block
# Get the top genes.
top.hvgs <- getTopHVGs(dec3, n=2000)
# Subset on only variable genes
all.exp.values.norm = all.exp.values.norm[rownames(all.exp.values.norm) %in% top.hvgs,]
all.exp.values.norm = genes_cleanup(all.exp.values.norm)
# Color points based on only subsetting inflitrates
tsne_inf = all.exp.values.norm[,colnames(all.exp.values.norm) %in% all_inf]
tsne_rest = all.exp.values.norm[,!colnames(all.exp.values.norm) %in% all_inf]
all_matrix = cbind(tsne_inf, tsne_rest)
# Run tSNE again
# tsne_out <- Rtsne(t(all_matrix), dims = 3, initial_dims = 13, theta = 0.5, check_duplicates = FALSE, pca = TRUE, perplexity = 60, max_iter = 1000, verbose = TRUE) # Run TSNE; initial_dims = 10 in the manuscript
tsne_out <- Rtsne(t(all_matrix), dims = 3, initial_dims = 9, theta = 0.5, check_duplicates = FALSE, pca = TRUE, perplexity = 60, max_iter = 1000, verbose = TRUE) # Run TSNE; initial_dims = 10 in the manuscript
# Make matrix of tsne data output
tsne <- as.data.frame(tsne_out$Y) # saved matrix availalbe in ./data
t1 <- as.matrix(tsne[1])
t2 <- as.matrix(tsne[2])
t3 <- as.matrix(tsne[3])
tsne_m <- cbind (t1,t2,t3)
rownames(tsne_m) = colnames(all_matrix)
# Hierachical clustering on tsne matrix
hc = hclust(dist(as.matrix(tsne_m[,1], tsne_m[,2])),method = "ward.D2")
plot(hc)
clusters = as.matrix(cutree(hc, k = 4))
row.names(clusters) = rownames(tsne_m)
# Assign colors to clusters
ct = 1
col.clusters = matrix (ncol = 1, nrow = nrow(clusters))
for (cl in clusters[,1]){
if (cl == 1) col.clusters[ct,] = "#FED8B1"
if (cl == 2) col.clusters[ct,] = "gray61"
if (cl == 3) col.clusters[ct,] = "gray76"
if (cl == 4) col.clusters[ct,] = "gray90"
if (cl == 5) col.clusters[ct,] = "gray99"
ct = ct + 1
}
row.names(col.clusters) = row.names(clusters)
col.clusters_to_heatmap = col.clusters
# Make tSNE 3D plots for output
scatter3D(tsne_m[,1],tsne_m[,2],tsne_m[,3], phi = 0,theta = -180, axes=FALSE, ann=FALSE,pch=16, col=col.clusters)
col.clusters[row.names(col.clusters) %in% colnames(tsne_inf),] <- "red"
col.clusters[!row.names(col.clusters) %in% colnames(tsne_inf),] <- "grey51"
scatter3D(tsne_m[,1],tsne_m[,2],tsne_m[,3], phi = 0,theta = -180, axes=FALSE, ann=FALSE,pch=16, col=col.clusters)
# Run tSNE again
# tsne_out <- Rtsne(t(all_matrix), dims = 3, initial_dims = 13, theta = 0.5, check_duplicates = FALSE, pca = TRUE, perplexity = 60, max_iter = 1000, verbose = TRUE) # Run TSNE; initial_dims = 10 in the manuscript
tsne_out <- Rtsne(t(all_matrix), dims = 3, initial_dims = 9, theta = 0.5, check_duplicates = FALSE, pca = TRUE, perplexity = 60, max_iter = 1000, verbose = TRUE) # Run TSNE; initial_dims = 10 in the manuscript
# Make matrix of tsne data output
tsne <- as.data.frame(tsne_out$Y) # saved matrix availalbe in ./data
t1 <- as.matrix(tsne[1])
t2 <- as.matrix(tsne[2])
t3 <- as.matrix(tsne[3])
tsne_m <- cbind (t1,t2,t3)
rownames(tsne_m) = colnames(all_matrix)
# Hierachical clustering on tsne matrix
hc = hclust(dist(as.matrix(tsne_m[,1], tsne_m[,2])),method = "ward.D2")
plot(hc)
clusters = as.matrix(cutree(hc, k = 4))
row.names(clusters) = rownames(tsne_m)
# Assign colors to clusters
ct = 1
col.clusters = matrix (ncol = 1, nrow = nrow(clusters))
for (cl in clusters[,1]){
if (cl == 1) col.clusters[ct,] = "#FED8B1"
if (cl == 2) col.clusters[ct,] = "gray61"
if (cl == 3) col.clusters[ct,] = "gray76"
if (cl == 4) col.clusters[ct,] = "gray90"
if (cl == 5) col.clusters[ct,] = "gray99"
ct = ct + 1
}
row.names(col.clusters) = row.names(clusters)
col.clusters_to_heatmap = col.clusters
# Make tSNE 3D plots for output
scatter3D(tsne_m[,1],tsne_m[,2],tsne_m[,3], phi = 0,theta = -180, axes=FALSE, ann=FALSE,pch=16, col=col.clusters)
col.clusters[row.names(col.clusters) %in% colnames(tsne_inf),] <- "red"
col.clusters[!row.names(col.clusters) %in% colnames(tsne_inf),] <- "grey51"
scatter3D(tsne_m[,1],tsne_m[,2],tsne_m[,3], phi = 0,theta = -180, axes=FALSE, ann=FALSE,pch=16, col=col.clusters)
# Run tSNE again
# tsne_out <- Rtsne(t(all_matrix), dims = 3, initial_dims = 13, theta = 0.5, check_duplicates = FALSE, pca = TRUE, perplexity = 60, max_iter = 1000, verbose = TRUE) # Run TSNE; initial_dims = 10 in the manuscript
tsne_out <- Rtsne(t(all_matrix), dims = 3, initial_dims = 9, theta = 0.5, check_duplicates = FALSE, pca = TRUE, perplexity = 60, max_iter = 1000, verbose = TRUE) # Run TSNE; initial_dims = 10 in the manuscript
# Make matrix of tsne data output
tsne <- as.data.frame(tsne_out$Y) # saved matrix availalbe in ./data
t1 <- as.matrix(tsne[1])
t2 <- as.matrix(tsne[2])
t3 <- as.matrix(tsne[3])
tsne_m <- cbind (t1,t2,t3)
rownames(tsne_m) = colnames(all_matrix)
# Hierachical clustering on tsne matrix
hc = hclust(dist(as.matrix(tsne_m[,1], tsne_m[,2])),method = "ward.D2")
plot(hc)
clusters = as.matrix(cutree(hc, k = 4))
row.names(clusters) = rownames(tsne_m)
# Assign colors to clusters
ct = 1
col.clusters = matrix (ncol = 1, nrow = nrow(clusters))
for (cl in clusters[,1]){
if (cl == 1) col.clusters[ct,] = "#FED8B1"
if (cl == 2) col.clusters[ct,] = "gray61"
if (cl == 3) col.clusters[ct,] = "gray76"
if (cl == 4) col.clusters[ct,] = "gray90"
if (cl == 5) col.clusters[ct,] = "gray99"
ct = ct + 1
}
row.names(col.clusters) = row.names(clusters)
col.clusters_to_heatmap = col.clusters
# Make tSNE 3D plots for output
scatter3D(tsne_m[,1],tsne_m[,2],tsne_m[,3], phi = 0,theta = -180, axes=FALSE, ann=FALSE,pch=16, col=col.clusters)
col.clusters[row.names(col.clusters) %in% colnames(tsne_inf),] <- "red"
col.clusters[!row.names(col.clusters) %in% colnames(tsne_inf),] <- "grey51"
scatter3D(tsne_m[,1],tsne_m[,2],tsne_m[,3], phi = 0,theta = -180, axes=FALSE, ann=FALSE,pch=16, col=col.clusters)
# Run tSNE again
# tsne_out <- Rtsne(t(all_matrix), dims = 3, initial_dims = 13, theta = 0.5, check_duplicates = FALSE, pca = TRUE, perplexity = 60, max_iter = 1000, verbose = TRUE) # Run TSNE; initial_dims = 10 in the manuscript
tsne_out <- Rtsne(t(all_matrix), dims = 3, initial_dims = 9, theta = 0.5, check_duplicates = FALSE, pca = TRUE, perplexity = 60, max_iter = 1000, verbose = TRUE) # Run TSNE; initial_dims = 10 in the manuscript
# Make matrix of tsne data output
tsne <- as.data.frame(tsne_out$Y) # saved matrix availalbe in ./data
t1 <- as.matrix(tsne[1])
t2 <- as.matrix(tsne[2])
t3 <- as.matrix(tsne[3])
tsne_m <- cbind (t1,t2,t3)
rownames(tsne_m) = colnames(all_matrix)
# Hierachical clustering on tsne matrix
hc = hclust(dist(as.matrix(tsne_m[,1], tsne_m[,2])),method = "ward.D2")
plot(hc)
clusters = as.matrix(cutree(hc, k = 4))
row.names(clusters) = rownames(tsne_m)
# Assign colors to clusters
ct = 1
col.clusters = matrix (ncol = 1, nrow = nrow(clusters))
for (cl in clusters[,1]){
if (cl == 1) col.clusters[ct,] = "#FED8B1"
if (cl == 2) col.clusters[ct,] = "gray61"
if (cl == 3) col.clusters[ct,] = "gray76"
if (cl == 4) col.clusters[ct,] = "gray90"
if (cl == 5) col.clusters[ct,] = "gray99"
ct = ct + 1
}
row.names(col.clusters) = row.names(clusters)
col.clusters_to_heatmap = col.clusters
# Make tSNE 3D plots for output
scatter3D(tsne_m[,1],tsne_m[,2],tsne_m[,3], phi = 0,theta = -180, axes=FALSE, ann=FALSE,pch=16, col=col.clusters)
col.clusters[row.names(col.clusters) %in% colnames(tsne_inf),] <- "red"
col.clusters[!row.names(col.clusters) %in% colnames(tsne_inf),] <- "grey51"
scatter3D(tsne_m[,1],tsne_m[,2],tsne_m[,3], phi = 0,theta = -180, axes=FALSE, ann=FALSE,pch=16, col=col.clusters)
# # Get the top 10% of genes.
# top.hvgs <- getTopHVGs(dec3, prop=0.1)
#
# # Get all genes with positive biological components.
top.hvgs3 <- getTopHVGs(dec3, var.threshold=0)
all.exp.values.norm = RA.norm
# this takes out per section variance
# make a sce object
section.labels = c(paste0("X1_", str_replace(colnames(m1), "X", "")),paste0("X2_", str_replace(colnames(m2), "X", "")), paste0("X3_", str_replace(colnames(m3), "X", "")), paste0("X4_", str_replace(colnames(m4), "X", "")))
section.data = c(rep("X1", ncol(m1)),rep("X2", ncol(m2)), rep("X3", ncol(m3)), rep("X4", ncol(m4)))
sce <- SingleCellExperiment(list(logcounts=as.matrix(all.exp.values.norm)), # this is based on norm counts so object names is logcounts
colData=DataFrame(section=section.data),
rowData=DataFrame(label=row.names(all.exp.values.norm)))
# get variable genes
dec3 <- modelGeneVar(sce, block=sce$section)
per.block <- dec3$per.block
# par(mfrow=c(3, 2))
# for (i in seq_along(per.block)) { # check that variacle is correctly computed when taking into account sections/experiments
#   decX <- per.block[[i]]
#   plot(decX$mean, decX$total, xlab="Mean log-expression",
#        ylab="Variance", main=names(per.block)[i])
#   curve(metadata(decX)$trend(x), col="blue", add=TRUE)
# }
# Get the top genes.
top.hvgs <- getTopHVGs(dec3, n=2000)
# # Get the top 10% of genes.
# top.hvgs <- getTopHVGs(dec3, prop=0.1)
#
# # Get all genes with positive biological components.
top.hvgs3 <- getTopHVGs(dec3, var.threshold=0)
#
# # Get all genes with FDR below 5%.
# top.hvgs4 <- getTopHVGs(dec3, fdr.threshold=0.05)
# Subset on only variable genes
all.exp.values.norm = all.exp.values.norm[rownames(all.exp.values.norm) %in% top.hvgs,]
all.exp.values.norm = genes_cleanup(all.exp.values.norm)
# Color points based on only subsetting inflitrates
tsne_inf = all.exp.values.norm[,colnames(all.exp.values.norm) %in% all_inf]
tsne_rest = all.exp.values.norm[,!colnames(all.exp.values.norm) %in% all_inf]
all_matrix = cbind(tsne_inf, tsne_rest)
# How many components are important?
per_out = permutationPA(all_matrix, B = 10, threshold = 0.1, verbose = TRUE, seed = NULL)
