image2D(z = mat.1, contour = con, smooth = TRUE, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_2_Contour_",gene,".pdf", sep=""))
image2D(z = mat.2, contour = con, smooth = TRUE, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_3_Contour_",gene,".pdf", sep=""))
image2D(z = mat.3, contour = con, smooth = TRUE, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_4_Contour_",gene,".pdf", sep=""))
image2D(z = mat.4, contour = con, smooth = TRUE, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
}
plot.gene.2d.cluster.7 = function(sample, cluster, m1, m2, m3, m4, m5, m6, m7, s1, s2, s3, s4, s5, s6, s7, x, y, transparency, min, max){
for (i in c(1:7)) {
if (i == "1") {
spots = s1
exp.values = m1}
if (i == "2") {
spots = s2
exp.values = m2}
if (i == "3") {
spots = s3
exp.values = m3}
if (i == "4") {
spots = s4
exp.values = m4}
if (i == "5") {
spots = s5
exp.values = m5}
if (i == "6") {
spots = s6
exp.values = m6}
if (i == "7") {
spots = s7
exp.values = m7}
clust.spots = rbind(s1,s2,s3,s4,s5,s6,s7)
rownames(clust.spots) = paste("X",rownames(clust.spots),sep="")
genes.barcodes = clust.spots[rownames(clust.spots) %in% colnames(exp.values),]
exp.values = exp.values[,colnames(exp.values) %in% rownames(clust.spots)]
exp.values = exp.values[rowSums(exp.values) != 0,]
cluster = ann_to_plot
cluster = cluster[colnames(exp.values),]
genes.barcodes = cbind(genes.barcodes, cluster)
x1 = as.numeric(genes.barcodes[,1])
x1 = x1[!is.na(x1)]
y1 = as.numeric(genes.barcodes[,2])
y1 = y1[!is.na(y1)]
z = as.numeric(genes.barcodes[,3])
dis = rep(0.25 * as.numeric(i), nrow(genes.barcodes))
w = as.numeric(dis)
library(akima)
s =  interp(x1, y1, z, nx = x, ny = y)
if (i == "1") {mat.1 = s$z}
if (i == "2") {mat.2 = s$z}
if (i == "3") {mat.3 = s$z}
if (i == "4") {mat.4 = s$z}
if (i == "5") {mat.5 = s$z}
if (i == "6") {mat.6 = s$z}
if (i == "7") {mat.7 = s$z}
}
library(rgl)
colorvar = colorRampPalette(c("gray85", "gray76","gray61","#FED8B1","#F49ACC"))(5)
pdf(paste(sample,"_1_Contour_Cluster",".pdf", sep=""))
image2D(z = mat.1, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_2_Contour_Cluster",".pdf", sep=""))
image2D(z = mat.2, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_3_Contour_Cluster",".pdf", sep=""))
image2D(z = mat.3, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_4_Contour_Cluster",".pdf", sep=""))
image2D(z = mat.4, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_5_Contour_Cluster",".pdf", sep=""))
image2D(z = mat.5, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_6_Contour_Cluster",".pdf", sep=""))
image2D(z = mat.6, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_7_Contour_Cluster",".pdf", sep=""))
image2D(z = mat.7, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
}
plot.gene.2d.7 = function(sample, gene, m1, m2, m3, m4, m5, m6, m7, s1, s2, s3, s4, s5, s6, s7, x, y, transparency, min, max, con){
for (i in c(1:7)) {
if (i == "1") {
spots = s1
exp.values = m1}
if (i == "2") {
spots = s2
exp.values = m2}
if (i == "3") {
spots = s3
exp.values = m3}
if (i == "4") {
spots = s4
exp.values = m4}
if (i == "5") {
spots = s5
exp.values = m5}
if (i == "6") {
spots = s6
exp.values = m6}
if (i == "7") {
spots = s7
exp.values = m7}
# row.names(mf1)
# spots = s1
# exp.values = mn1
# gene = row.names(mf1)[1]
# x = 40
# y = 40
genes.barcodes = exp.values[rownames(exp.values) == gene,]
exp.values = exp.values[,colnames(exp.values) %in% rownames(spots)]
exp.values= exp.values[rowSums(exp.values) != 0,]
spots = spots[colnames(exp.values),]
genes.barcodes.1 = cbind(spots, genes.barcodes)
print(i)
x1 = as.numeric(genes.barcodes.1[,1])
x1 = x1[!is.na(x1)]
y1 = as.numeric(genes.barcodes.1[,2])
y1 = y1[!is.na(y1)]
z = as.numeric(genes.barcodes.1[,3])
s =  interp(x1, y1, z, nx = x, ny = y)
if (i == "1") {mat.1 = s$z}
if (i == "2") {mat.2 = s$z}
if (i == "3") {mat.3 = s$z}
if (i == "4") {mat.4 = s$z}
if (i == "5") {mat.5 = s$z}
if (i == "6") {mat.6 = s$z}
if (i == "7") {mat.7 = s$z}
}
pdf(paste(sample,"_1_Contour_",gene,".pdf", sep=""))
image2D(z = mat.1, contour = con, smooth = TRUE, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_2_Contour_",gene,".pdf", sep=""))
image2D(z = mat.2, contour = con, smooth = TRUE, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_3_Contour_",gene,".pdf", sep=""))
image2D(z = mat.3, contour = con, smooth = TRUE, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_4_Contour_",gene,".pdf", sep=""))
image2D(z = mat.4, contour = con, smooth = TRUE, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_5_Contour_",gene,".pdf", sep=""))
image2D(z = mat.5, contour = con, smooth = TRUE, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_6_Contour_",gene,".pdf", sep=""))
image2D(z = mat.6, contour = con, smooth = TRUE, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_7_Contour_",gene,".pdf", sep=""))
image2D(z = mat.7, contour = con, smooth = TRUE, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
}
plot.gene.2d.inf.7 = function(sample, cluster, m1, m2, m3, m4, m5, m6, m7, s1, s2, s3, s4, s5, s6, s7, x, y, transparency, min, max){
for (i in c(1:7)) {
if (i == "1") {
spots = s1
exp.values = m1}
if (i == "2") {
spots = s2
exp.values = m2}
if (i == "3") {
spots = s3
exp.values = m3}
if (i == "4") {
spots = s4
exp.values = m4}
if (i == "5") {
spots = s5
exp.values = m5}
if (i == "6") {
spots = s6
exp.values = m6}
if (i == "7") {
spots = s7
exp.values = m7}
clust.spots = rbind(s1,s2,s3,s4,s5,s6,s7)
genes.barcodes = clust.spots[rownames(clust.spots) %in% colnames(exp.values),]
exp.values = exp.values[,colnames(exp.values) %in% rownames(clust.spots)]
exp.values = exp.values[rowSums(exp.values) != 0,]
cluster = ann.col.inf
cluster = cluster[colnames(exp.values),]
genes.barcodes = cbind(genes.barcodes, cluster)
x1 = as.numeric(genes.barcodes[,1])
x1 = x1[!is.na(x1)]
y1 = as.numeric(genes.barcodes[,2])
y1 = y1[!is.na(y1)]
z = as.numeric(genes.barcodes[,3])
dis = rep(0.25 * as.numeric(i), nrow(genes.barcodes))
w = as.numeric(dis)
# x = 40
# y = 40
# transparency = 1
library(akima)
s =  interp(x1, y1, z, nx = x, ny = y)
if (i == "1") {mat.1 = s$z}
if (i == "2") {mat.2 = s$z}
if (i == "3") {mat.3 = s$z}
if (i == "4") {mat.4 = s$z}
if (i == "5") {mat.5 = s$z}
if (i == "6") {mat.6 = s$z}
if (i == "7") {mat.7 = s$z}
}
library(rgl)
colorvar = colorRampPalette(c("#8a3795", "#4ebceb","#f15f48","gray80"))(4)
pdf(paste(sample,"_1_Contour_Inf",".pdf", sep=""))
image2D(z = mat.1, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_2_Contour_Inf",".pdf", sep=""))
image2D(z = mat.2, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_3_Contour_Inf",".pdf", sep=""))
image2D(z = mat.3, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_4_Contour_Inf",".pdf", sep=""))
image2D(z = mat.4, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_5_Contour_Inf",".pdf", sep=""))
image2D(z = mat.5, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_6_Contour_Inf",".pdf", sep=""))
image2D(z = mat.6, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_7_Contour_Inf",".pdf", sep=""))
image2D(z = mat.7, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
}
plot.gene.2d.inf.4 = function(sample, cluster, m1, m2, m3, m4, s1, s2, s3, s4, x, y, transparency, min, max){
for (i in c(1:4)) {
if (i == "1") {
spots = s1
exp.values = m1}
if (i == "2") {
spots = s2
exp.values = m2}
if (i == "3") {
spots = s3
exp.values = m3}
if (i == "4") {
spots = s4
exp.values = m4}
clust.spots = rbind(s1,s2,s3,s4)
genes.barcodes = clust.spots[rownames(clust.spots) %in% colnames(exp.values),]
exp.values = exp.values[,colnames(exp.values) %in% rownames(clust.spots)]
exp.values = exp.values[rowSums(exp.values) != 0,]
cluster = ann.col.inf
cluster = cluster[colnames(exp.values),]
genes.barcodes = cbind(genes.barcodes, cluster)
x1 = as.numeric(genes.barcodes[,1])
x1 = x1[!is.na(x1)]
y1 = as.numeric(genes.barcodes[,2])
y1 = y1[!is.na(y1)]
z = as.numeric(genes.barcodes[,3])
dis = rep(0.25 * as.numeric(i), nrow(genes.barcodes))
w = as.numeric(dis)
# x = 40
# y = 40
# transparency = 1
library(akima)
s =  interp(x1, y1, z, nx = x, ny = y)
if (i == "1") {mat.1 = s$z}
if (i == "2") {mat.2 = s$z}
if (i == "3") {mat.3 = s$z}
if (i == "4") {mat.4 = s$z}
}
colorvar = colorRampPalette(c("#4ebceb","#f15f48","gray80"))(3)
pdf(paste(sample,"_1_Contour_Inf",".pdf", sep=""))
image2D(z = mat.1, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_2_Contour_Inf",".pdf", sep=""))
image2D(z = mat.2, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_3_Contour_Inf",".pdf", sep=""))
image2D(z = mat.3, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
pdf(paste(sample,"_4_Contour_Inf",".pdf", sep=""))
image2D(z = mat.4, contour = T, smooth = TRUE, col=colorvar, alpha = transparency, box = FALSE, inttype = 1, clim = c(min, max), NAcol = "transparent", x = c(1:x), y = c(1:y), scale = F)
dev.off()
}
all.exp.values.norm = genes_cleanup(all.exp.values.norm)
genes_r2b = rownames(all.exp.values.norm)
# Hierachical clustering
hc = hclust(dist(t(all.exp.values.norm)), method = "ward.D2")
clusters = as.matrix(cutree(hc, k = 2))
row.names(clusters) = colnames(all.exp.values.norm)
col.clusters = c(rep("#FED8B1",length(clusters[clusters == 1])),rep("gray61",length(clusters[clusters == 2])),
rep("gray76",length(clusters[clusters == 3])),rep("gray90",length(clusters[clusters == 4])),rep("black",length(clusters[clusters == 5])))
plot(hc, labels = clusters, cex = 0.5)
#Do DEG analysis
m3_ref = all_matrix
mg1 <- m3_ref[,clusters == 1]
mg2 <- m3_ref[,clusters == 2]
mg3 <- m3_ref[,clusters == 3]
mg4 <- m3_ref[,clusters == 4]
clusters
mg1 <- m3_ref[,clusters == 1]
mg2 <- m3_ref[,clusters == 2]
#Do DEG analysis
m3_ref = all_matrix
#Do DEG analysis
m3_ref = all.exp.values.norm
mg1 <- m3_ref[,clusters == 1]
mg2 <- m3_ref[,clusters == 2]
library(devtools)
degg <- bimod.diffExp.test(mg1, as.matrix(m3_ref[,!colnames(m3_ref) %in% colnames(mg1)]), row.names(mg1))
clus1.genes <- rownames(subset(degg, degg[,1] < 0.001 & (degg[,2] > 0.5 | degg[,2] < -0.5)))
### Make distance heatmaps of clones parallel to tSNE
annotation_col = as.matrix(c(rep("#FED8B1", ncol(mg1)),rep("gray61", 1),rep("gray76", ncol(mg3)),rep("gray85", ncol(mg4)),rep("gray91", ncol(mg5))))
### Make distance heatmaps of clones parallel to tSNE
annotation_col = as.matrix(c(rep("#FED8B1", ncol(mg1)), rep("gray61", 1)))
genes = unique(c(clus1.genes,clus2.genes))
genes = unique(c(clus1.genes,clus2.genes))
degg <- bimod.diffExp.test(mg2, as.matrix(m3_ref[,!colnames(m3_ref) %in% colnames(mg2)]), row.names(mg2))
m3_ref
colnames(mg2)
mg2
### Make distance heatmaps of clones parallel to tSNE
annotation_col = as.matrix(c(rep("#FED8B1", ncol(mg1)), rep("gray61", 1)))
genes = unique(c(clus1.genes))
house.keeping.genes = row.names(read.delim("house_keeping_final.txt", row.names = 1))
genes <- intersect(genes, outersect(genes,row.names(house.keeping.genes)))
annotation_col = c(annotation_col[annotation_col == "#FED8B1",],annotation_col[annotation_col == "gray61",],annotation_col[annotation_col == "gray76",],annotation_col[annotation_col == "gray85",],annotation_col[annotation_col == "gray91",])
inf_colors = c(rep("#FF7F00", ncol(tsne_inf)), rep("grey51", ncol(tsne_rest)))
ann=matrix(nrow=length(annotation_col), ncol = 2)
rownames(ann) = names(annotation_col)
library(gplots)
library(devtools)
source_url("https://raw.githubusercontent.com/obigriffith/biostar-tutorials/master/Heatmaps/heatmap.3.R")
quantile.range <- quantile(m3_ref, probs = seq(0, 1, 0.05))
palette.breaks <- seq(quantile.range["95%"], quantile.range["100%"], 0.1)
# use http://colorbrewer2.org/ to find optimal divergent color palette (or set own)
col.pal = colorRampPalette(c("black","purple","darkorchid1","gold1"))
color.palette  <- col.pal(length(palette.breaks) - 1)
heatmap.3(all.exp.values.norm[genes,], Rowv = T, Colv = F, col=color.palette, breaks = palette.breaks,
scale="none",trace = "none",density.info = "none", ColSideColors = ann, labCol = 0)
all.exp.values.norm
heatmap.3(all.exp.values.norm[genes,], Rowv = T, Colv = F, col=color.palette, breaks = palette.breaks,
scale="none",trace = "none",density.info = "none", ColSideColors = ann, labCol = 0)
genes
### Make distance heatmaps of clones parallel to tSNE
annotation_col = as.matrix(c(rep("#FED8B1", ncol(mg1)), rep("gray61", 1)))
genes = unique(c(clus1.genes))
house.keeping.genes = row.names(read.delim("house_keeping_final.txt", row.names = 1))
genes <- intersect(genes, outersect(genes,row.names(house.keeping.genes)))
genes
row.names(house.keeping.genes)
house.keeping.genes = read.delim("house_keeping_final.txt", row.names = 1)
house.keeping.genes
genes <- intersect(genes, outersect(genes,row.names(house.keeping.genes)))
genes = unique(c(clus1.genes))
house.keeping.genes = read.delim("house_keeping_final.txt", row.names = 1)
genes <- intersect(genes, outersect(genes,row.names(house.keeping.genes)))
genes
row.names(house.keeping.genes)
genes
genes = unique(c(clus1.genes))
genes
degg <- bimod.diffExp.test(mg1, as.matrix(m3_ref[,!colnames(m3_ref) %in% colnames(mg1)]), row.names(mg1))
clus1.genes <- rownames(subset(degg, degg[,1] < 0.001 & (degg[,2] > 0.5 | degg[,2] < -0.5)))
clus1.genes
mg1
# Hierachical clustering
hc = hclust(dist(t(all.exp.values.norm)), method = "ward.D2")
clusters = as.matrix(cutree(hc, k = 3))
row.names(clusters) = colnames(all.exp.values.norm)
col.clusters = c(rep("#FED8B1",length(clusters[clusters == 1])),rep("gray61",length(clusters[clusters == 2])),
rep("gray76",length(clusters[clusters == 3])),rep("gray90",length(clusters[clusters == 4])),rep("black",length(clusters[clusters == 5])))
plot(hc, labels = clusters, cex = 0.5)
#Do DEG analysis
m3_ref = all_matrix
mg1 <- m3_ref[,clusters == 1]
mg2 <- m3_ref[,clusters == 2]
mg3 <- m3_ref[,clusters == 3]
mg4 <- m3_ref[,clusters == 4]
degg <- bimod.diffExp.test(mg1, m3_ref[,!colnames(m3_ref) %in% colnames(mg1)], row.names(mg1))
clus1.genes <- rownames(subset(degg, degg[,1] < 0.001 & (degg[,2] > 0.5 | degg[,2] < -0.5)))
degg <- bimod.diffExp.test(mg2,m3_ref[,!colnames(m3_ref) %in% colnames(mg2)], row.names(mg2))
clus2.genes <- rownames(subset(degg, degg[,1] < 0.001 & (degg[,2] > 0.5 | degg[,2] < -0.5)))
degg <- bimod.diffExp.test(mg3,m3_ref[,!colnames(m3_ref) %in% colnames(mg3)], row.names(mg3))
clus3.genes <- rownames(subset(degg, degg[,1] < 0.001 & (degg[,2] > 0.5 | degg[,2] < -0.5)))
degg <- bimod.diffExp.test(mg4,m3_ref[,!colnames(m3_ref) %in% colnames(mg4)], row.names(mg4))
clus4.genes <- rownames(subset(degg, degg[,1] < 0.001 & (degg[,2] > 0.5 | degg[,2] < -0.5)))
clus1.genes
clus2.genes
clus3.genes
# Do same type of analysis as for spatial data
exp.values = merge(r1, r2, by = "row.names", all = TRUE)
r2
# # Bind into one matrix
r2 = cbind(r2b1, r2b2, r2b3, r2b4)
load('RA2_norm.exp.values.1') # in ./data
load('RA2_norm.exp.values.2') # in ./data
load('RA2_norm.exp.values.3') # in ./data
load('RA2_norm.exp.values.4') # in ./data
load('RA2_norm.exp.values.5') # in ./data
load('RA2_norm.exp.values.6') # in ./data
load('RA2_norm.exp.values.7') # in ./data
# Combine into avg expression profile per section
r1b1 <- rowMeans(m1)
r1b2 <- rowMeans(m2)
r1b3 <- rowMeans(m3)
r1b4 <- rowMeans(m4)
r1b5 <- rowMeans(m5)
r1b6 <- rowMeans(m6)
r1b7 <- rowMeans(m7)
# Bind into one matrix
r1 = cbind(r1b1, r1b2, r1b3, r1b4, r1b5, r1b6, r1b7)
# Do same type of analysis as for spatial data
exp.values = merge(r1, r2, by = "row.names", all = TRUE)
rownames(exp.values) = exp.values[,1]
exp.values = as.matrix(exp.values[-1])
all.exp.values.norm = exp.values
fit = trendVar(all.exp.values.norm)
decomp = decomposeVar(all.exp.values.norm, fit)
top.hvgs = order(decomp$bio, decreasing=TRUE)
decomp_bio = decomp[top.hvgs,][1:500,]
all.exp.values.norm = exp.values
fit = trendVar(all.exp.values.norm)
decomp = decomposeVar(all.exp.values.norm, fit)
exp.values
r1
r2
head(r1)
head(r2)
# Do same type of analysis as for spatial data
exp.values = merge(r1, r2, by = "row.names", all = TRUE)
rownames(exp.values) = exp.values[,1]
exp.values = as.matrix(exp.values[-1])
head(exp.values)
exp.values = mbind(r1, r2)
all.exp.values.norm = exp.values
fit = trendVar(all.exp.values.norm)
head(exp.values)
exp.values = exp.values[!is.na(exp.values),]
# Do same type of analysis as for spatial data
exp.values = mbind(r1, r2)
exp.values = exp.values[,!is.na(exp.values)]
!is.na(exp.values)
exp.values = exp.values[!is.na(exp.values),]
# Do same type of analysis as for spatial data
exp.values = mbind(r1, r2)
exp.values = exp.values[!is.na(exp.values),]
exp.values = exp.values[complete.cases(exp.values),]
all.exp.values.norm = exp.values
fit = trendVar(all.exp.values.norm)
decomp = decomposeVar(all.exp.values.norm, fit)
top.hvgs = order(decomp$bio, decreasing=TRUE)
decomp_bio = decomp[top.hvgs,][1:500,]
# Do same type of analysis as for spatial data
all.exp.values.norm = exp.values
fit = trendVar(all.exp.values.norm)
decomp = decomposeVar(all.exp.values.norm, fit)
top.hvgs = order(decomp$bio, decreasing=TRUE)
decomp_bio = decomp[top.hvgs,][1:500,]
# Subset on only variable genes
all.exp.values.norm = all.exp.values.norm[rownames(all.exp.values.norm) %in% rownames(decomp_bio),]
all.exp.values.norm = genes_cleanup(all.exp.values.norm)
genes_rb_all = rownames(all.exp.values.norm)
# Hierachical clustering
hc = hclust(dist(t(all.exp.values.norm)), method = "ward.D2")
clusters = as.matrix(cutree(hc, k = 2))
row.names(clusters) = colnames(all.exp.values.norm)
col.clusters = c(rep("#FED8B1",length(clusters[clusters == 1])),rep("gray61",length(clusters[clusters == 2])),
rep("gray76",length(clusters[clusters == 3])),rep("gray90",length(clusters[clusters == 4])),rep("black",length(clusters[clusters == 5])))
plot(hc, labels = clusters, cex = 0.5)
pc <- prcomp(all.exp.values.norm)
rot <- pc[2]
rot = as.data.frame(rot)
par(mar=c(5.1, 4.1, 4.1, 9.1), xpd=TRUE)
plot(rot$rotation.PC1, rot$rotation.PC2, pch=16,cex=3,col=c(colfuncra1(9)[1],colfuncra1(9)[2],colfuncra1(9)[3],colfuncra1(9)[4],colfuncra1(9)[5],colfuncra1(9)[6],colfuncra1(9)[9],colfuncra2(4)[1],colfuncra2(4)[2],colfuncra2(4)[3],colfuncra2(4)[4]))
plot(rot$rotation.PC1, rot$rotation.PC2)
cf = c("#E6E5F3", "#EE99A7", "#F04F55", "#ED2224", "#AED8E6", "#98BDDA", "#81A2CE", "#6D88C2", "#586DB3", "#4354A5", "#323E99")
plot(rot$rotation.PC1, rot$rotation.PC2, pch=16,cex=3,col=cf)
legend("topright",inset=c(0,0),row.names(rot), pch=16, xpd = TRUE, horiz = FALSE, bty = "n", cex = 1,col=cf)
summary(pc)
eigs <- pc$sdev^2
eigs[1] / sum(eigs)
eigs[2] / sum(eigs)
eigs[3] / sum(eigs)
#Do DEG analysis
m3_ref = all.exp.values.norm
mg1 <- m3_ref[,clusters == 1]
mg2 <- m3_ref[,clusters == 2]
degg <- bimod.diffExp.test(mg1, m3_ref[,!colnames(m3_ref) %in% colnames(mg1)], row.names(mg1))
clus1.genes <- rownames(subset(degg, degg[,1] > 0.001 & (degg[,2] > 1 | degg[,2] < -1)))
clus1.genes.values = degg[clus1.genes,]
degg <- bimod.diffExp.test(mg2,m3_ref[,!colnames(m3_ref) %in% colnames(mg2)], row.names(mg2))
clus2.genes <- rownames(subset(degg, degg[,1] < 0.001 & (degg[,2] > 1 | degg[,2] < -1)))
clus2.genes.values = degg[clus2.genes,]
rbind(clus1.genes.values,clus2.genes.values)
### Make distance heatmaps of clones parallel to tSNE
genes = unique(c(clus1.genes,clus2.genes,clus3.genes,clus4.genes,clus5.genes))
house.keeping.genes = row.names(read.delim("house_keeping_final.txt", row.names = 1))
genes <- intersect(genes, outersect(genes,row.names(house.keeping.genes)))
### Make distance heatmaps of clones parallel to tSNE
genes = unique(c(clus1.genes,clus2.genes))
house.keeping.genes = row.names(read.delim("house_keeping_final.txt", row.names = 1))
genes <- intersect(genes, outersect(genes,row.names(house.keeping.genes)))
annotation_col=cf
names(annotation_col) = c(colnames(all.exp.values.norm))
annotation_col = as.matrix(annotation_col)
quantile.range <- quantile(m3_ref, probs = seq(0, 1, 0.05))
palette.breaks <- seq(quantile.range["60%"], quantile.range["100%"], 0.1)
# use http://colorbrewer2.org/ to find optimal divergent color palette (or set own)
col.pal = colorRampPalette(c("black","purple","darkorchid1","gold1"))
color.palette  <- col.pal(length(palette.breaks) - 1)
heatmap.3(all.exp.values.norm[genes,nam], Rowv = T, Colv = F, col=color.palette, breaks = palette.breaks,
scale="none",trace = "none",density.info = "none", ColSideColors = annotation_col, labCol = 0, cexRow = 0.3)
heatmap.3(all.exp.values.norm[genes,], Rowv = T, Colv = F, col=color.palette, breaks = palette.breaks,
scale="none",trace = "none",density.info = "none", ColSideColors = annotation_col, labCol = 0, cexRow = 0.3)
